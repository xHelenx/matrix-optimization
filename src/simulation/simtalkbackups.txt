
XMLconfig.FileName :="E:\Bachelorarbeit\src\simulation\config.temp"
XMLconfig.openWrite
XMLconfig.startElement("config")

for var part := 1 to root.WorkPlan.dim
	XMLconfig.startElement(root.WorkPlan[0,part])
	XMLconfig.addAttribute("type", "string")
	for var procstep := 1 to root.WorkPlan["Operation",part].dim
		XMLconfig.startElement("P" + to_str(root.WorkPlan["Operation",part][0,procstep]))
		XMLconfig.addAttribute("type","string")
		for var src := 1 to root.WorkPlan["Operation",part]["PossiblePositions",procstep].dim
			XMLconfig.startElement(root.WorkPlan["Operation",part]["PossiblePositions",procstep][0,src].Name)
			XMLconfig.addAttribute("type", "string")
			for var dest := 1 to root.WorkPlan["Operation",part]["PossiblePositions",procstep]["PossibleNext",src].dim
				XMLconfig.startElement(root.WorkPlan["Operation",part]["PossiblePositions",procstep]["PossibleNext",src][0,dest].Name)
				XMLconfig.addAttribute("type", "string")
				for var property := 1 to 1 //if refer to table add here for dim
					///here new properties can be added
					XMLconfig.writeElement("procTime", to_str(root.WorkPlan["Operation",part]["PossiblePositions",procstep]["PossibleNext",src]["ProcessingTime",dest]))
					XMLconfig.addAttribute("type", "float")
				next
				XMLconfig.endElement()
			next
			XMLconfig.endElement()
		next
		XMLconfig.endElement()
	next
	XMLconfig.endElement()
next
XMLconfig.endElement()
XMLconfig.close()

copyFile("E:\Bachelorarbeit\src\simulation\config.temp", "E:\Bachelorarbeit\src\simulation\config.xml")
system("del E:\Bachelorarbeit\src\simulation\config.temp")

-------------------
ExitControl()
////////////////////////////////////////
		//WRITE STATUS//
//read the occupation of each machine at timestep t in simulation and writes it to the simulation
var stations: object[]

for var part := 1 to root.WorkPlan.dim
	for var procstep := 1 to root.WorkPlan["Operation",part].dim
		for var src := 1 to root.WorkPlan["Operation",part]["PossiblePositions",procstep].dim
			for var dest := 1 to root.WorkPlan["Operation",part]["PossiblePositions",procstep]["PossibleNext",src].dim
				print root.WorkPlan["Operation",part]["PossiblePositions",procstep]["PossibleNext",src][0,dest]
				if not stations.contains(root.WorkPlan["Operation",part]["PossiblePositions",procstep]["PossibleNext",src][0,dest])
					stations.append(root.WorkPlan["Operation",part]["PossiblePositions",procstep]["PossibleNext",src][0,dest])
				end
			next
		next
	next
next

XMLInterface.FileName :="E:\Bachelorarbeit\src\simulation\state.temp"

XMLInterface.openWrite
XMLInterface.startElement("machines")

for var i := 1 to stations.Dim
	XMLInterface.startElement(stations[i].Name)
	XMLInterface.writeElement("occupied", to_str(stations[i].Occupied))
	XMLconfig.addAttribute("type", "boolean")
	if stations[i].Occupied
		XMLInterface.writeElement("parttype", to_str(stations[i].Cont.PartType))
		XMLconfig.addAttribute("type", "string")
		XMLInterface.writeElement("remainingproctime", to_str(stations[i].Cont.RemainingProcTime))
		XMLconfig.addAttribute("type", "float")
	else
		XMLInterface.writeElement("parttype", "None")
		XMLconfig.addAttribute("type", "string")
		XMLInterface.writeElement("remainingproctime", to_str(-1))
		XMLconfig.addAttribute("type", "float")
	end
	XMLInterface.endElement
next

XMLInterface.endElement
XMLInterface.close

copyFile("E:\Bachelorarbeit\src\simulation\state.temp", "E:\Bachelorarbeit\src\simulation\state.xml")
system("del E:\Bachelorarbeit\src\simulation\state.temp")

////////////////////////////////////////
		//READ AND EXECUTE ACTION//
//reads the xml file containing the next action to perform and performs it

var src_str:string
var dest_str:string

XMLInterface1.FileName := "E:\Bachelorarbeit\src\simulation\action.xml"

var fileReady:boolean := false
repeat
	fileReady := existsFile("E:\Bachelorarbeit\src\simulation\action.xml")
until fileReady

//ggf while hier wieder einfÃ¼gen mit while src = ""
XMLInterface1.openDocument

XMLInterface1.selectNodes(" /action/source | /action/destination")

XMLInterface1.selectChildren

XMLInterface1.getNextNode
src_str:= XMLInterface1.getNodeValue
XMLInterface1.getNextNode
dest_str:= XMLInterface1.getNodeValue

XMLInterface1.closeChildren
XMLInterface1.close



//perform chosen action
src := str_to_obj(src_str)
dest := str_to_obj(dest_str)
//print src
//print dest
var currentPart:object := src.Cont

//var tableLength:integer := root.WorkPlan["Operation",currentPart.PartType].dim
//print tableLength
//var totalProcSteps:integer := root.WorkPlan["Operation",currentPart.PartType]["ProcessStep", tableLength]

var totalProcSteps:integer := root.WorkPlan["Operation",currentPart.PartType]["ProcessStep",  root.WorkPlan["Operation",currentPart.PartType].dim]
//print currentPart.ProcessStep
//print "-------"
//print currentPart
if currentPart.ProcessStep > totalProcSteps
	//print "if"
	currentPart.move(Drain1) -- end of production
else
//print "else"
   if src.Cont.move(dest)
	currentPart.ProcessStep := currentPart.ProcessStep +1
   end
end
//print "-----"

src := void
dest := void
